name: Terraform Plan with OPA Evaluation

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allow manual triggering for both apply and destroy

jobs:
  run_terraform_opa_check:
    runs-on: ubuntu-latest
    steps:
    # Step 1: Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v2

    # Step 2: Set up Terraform
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1.4.0
      with:
        terraform_version: 1.6.0

    # Step 3: Install OPA (Open Policy Agent)
    - name: Install OPA
      run: |
        # Clear any previous OPA installations
        sudo rm -f /usr/local/bin/opa

        # Download OPA binary
        curl -L -o opa https://github.com/open-policy-agent/opa/releases/download/v0.46.0/opa_linux_amd64

        # Make it executable
        chmod +x opa

        # Move it to the appropriate location
        sudo mv opa /usr/local/bin/opa

        # Verify OPA installation
        which opa || echo "OPA not found"

        # Check if OPA is functioning by running the version
        opa version || echo "OPA not installed properly"

    # Step 4: Download Terraform Plan artifact
    - name: Download Terraform Plan artifact
      uses: actions/download-artifact@v3
      with:
        name: tfplan
        path: ./terraform/

    # Step 5: Verify the downloaded Terraform plan
    - name: Verify downloaded Terraform plan
      run: |
        ls -l ./terraform/tfplan
        echo "Checking the plan file..."

    # Step 6: Convert Terraform plan to JSON format
    - name: Convert Terraform plan to JSON
      run: |
        terraform show -json ./terraform/tfplan > ./terraform/plan.json
        ls -l ./terraform/plan.json

    # Step 7: Evaluate Terraform plan with OPA policies
    - name: Evaluate Terraform plan with OPA policies
      run: |
        # Ensure OPA is in the path before running eval
        echo "Evaluating Terraform plan with OPA..."
        
        # Run the OPA eval against the Terraform plan
        opa eval --format pretty --data ./terraform/policies/opa.rego ./terraform/plan.json

  # Apply Job
  apply:
    needs: run_terraform_opa_check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
          aws-region: us-east-2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1.4.0
        with:
          terraform_version: 1.6.0

      - name: Download Terraform Plan
        uses: actions/download-artifact@v3
        with:
          name: tfplan
          path: ./terraform

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve ./terraform/tfplan
        working-directory: ./terraform

  # Destroy Job
  destroy:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'destroy') || github.event_name == 'workflow_dispatch'  # Run this job if 'destroy' is in the commit message or manually triggered
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
          aws-region: us-east-2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1.4.0
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Destroy
        run: terraform destroy -auto-approve
        working-directory: ./terraform





# name: terraform cicd pipeline

# on:
#   push:
#     branches:
#       - main
#       - dev
#       - '*'
#   workflow_dispatch:

# jobs:
#   terraform:
#     runs-on: ubuntu-latest 
#     if: "!contains(github.event.head_commit.message, 'destroy')"  # Prevent this job from running if 'destroy' is in the commit message

#     steps:    
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
#           aws-region: us-east-2   

#     #   - name: Run tfsec
#     #     uses: aquasecurity/tfsec-action@v1.0.0

#     #   - name: Run Checkov
#     #     uses: bridgecrewio/checkov-action@v12
#     #     with:
#     #       directory: ./terraform

#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v1.4.0
#         with:
#           terraform_version: 1.6.0 

#       - name: Install OPA
#         run: |
#           curl -L -o opa https://github.com/open-policy-agent/opa/releases/download/v0.46.0/opa_linux_amd64
#           chmod +x opa
#           sudo mv opa /usr/local/bin/opa

#       - name: Terraform Init
#         run: terraform init
#         working-directory: ./terraform

#       - name: Terraform fmt   
#         run: terraform fmt
#         working-directory: ./terraform

#       - name: Terraform validate
#         run: terraform validate
#         working-directory: ./terraform

#       - name: Terraform Plan
#         run: terraform plan -out=tfplan
#         working-directory: ./terraform

#       - name: Output Terraform Plan 
#         run: terraform show tfplan
#         working-directory: ./terraform

#       - name: Upload Terraform Plan
#         uses: actions/upload-artifact@v3
#         with:
#           name: tfplan
#           path: ./terraform/tfplan

#   opa-policy-evaluation:
#     runs-on: ubuntu-latest
#     needs: terraform
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: us-east-2

#       - name: Download Terraform Plan
#         uses: actions/download-artifact@v3
#         with:
#           name: tfplan
#           path: ./terraform

#       - name: OPA Policy Evaluation
#         run: |
#           /usr/local/bin/opa eval --format pretty --data ./terraform/policies/opa.rego \
#           --input ./terraform/tfplan "data.opa.deny"
#         # env:
#         #   OPA_POLICY: ${{ secrets.OPA_POLICY }}  # Optional: Use this secret to fetch OPA policy from a secure location

#   apply:
#     needs: terraform
#     runs-on: ubuntu-latest
#     # environment:
#     #   name: production

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
#           aws-region: us-east-2

#       - name: Set up Terraform
#         uses: hashicorp/setup-terraform@v1.4.0
#         with:
#           terraform_version: 1.6.0

#       - name: Download Terraform Plan
#         uses: actions/download-artifact@v3
#         with:
#           name: tfplan
#           path: ./terraform

#       - name: Terraform Init
#         run: terraform init
#         working-directory: ./terraform

#       - name: Terraform Apply
#         run: terraform apply -auto-approve tfplan
#         working-directory: ./terraform

#   destroy:
#     runs-on: ubuntu-latest
#     if: contains(github.event.head_commit.message, 'destroy') || github.event_name == 'workflow_dispatch'  # Run this job if 'destroy' is in the commit message or manually triggered

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
#           aws-region: us-east-2

#       - name: Set up Terraform
#         uses: hashicorp/setup-terraform@v1.4.0
#         with:
#           terraform_version: 1.6.0

#       - name: Terraform Init
#         run: terraform init
#         working-directory: ./terraform

#       - name: Terraform Destroy
#         run: terraform destroy -auto-approve
#         working-directory: ./terraform

#     #   - name: Check and Retry Terraform Destroy
# #         run: |
# #           for i in {1..5}; do
# #             terraform destroy -auto-approve && break || (echo "State lock detected. Retrying in 10 seconds..." && sleep 10)
# #           done
# #         working-directory: ./terraform/infra






# # name: terraform cicd pipeline

# # on:
# #   push:
# #     branches:
# #       - main
# #       - dev
# #       - '*'
# #   workflow_dispatch: 

# # jobs:
# #   terraform:
# #     runs-on: ubuntu-latest 
# #     if: "!contains(github.event.head_commit.message, 'destroy')"  #Prevent this job from running if 'destroy' is in the commit message

# #     steps:    
# #       - name: Checkout code
# #         uses: actions/checkout@v3

# #       - name: Configure AWS Credentials
# #         uses: aws-actions/configure-aws-credentials@v1
# #         with:
# #           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
# #           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
# #           aws-region: us-east-2   

# #       - name: Run tfsec
# #         uses: aquasecurity/tfsec-action@v1.0.0

# #       - name: Run Checkov
# #         uses: bridgecrewio/checkov-action@v12
# #         with:
# #           directory: ./terraform

# #       - name: Setup Terraform
# #         uses: hashicorp/setup-terraform@v1.4.0
# #         with:
# #           terraform_version: 1.6.0 

# #       - name: Install OPA
# #         run: |
# #           curl -L -o opa https://github.com/open-policy-agent/opa/releases/download/v0.46.0/opa_linux_amd64
# #           chmod +x opa
# #           sudo mv opa /usr/local/bin/opa

# #       - name: Terraform Init
# #         run: terraform init
# #         working-directory: ./terraform

# #       - name: Terraform fmt   
# #         run: terraform fmt
# #         working-directory: ./terraform

# #       - name: Terraform validate
# #         run: terraform validate
# #         working-directory: ./terraform

# #       - name: Terraform Plan
# #         run: terraform plan -out=tfplan
# #         working-directory: ./terraform

# #       - name: Output Terraform Plan 
# #         run: terraform show tfplan
# #         working-directory: ./terraform

# #       - name: Upload Terraform Plan
# #         uses: actions/upload-artifact@v3
# #         with:
# #           name: tfplan
# #           path: ./terraform/tfplan

# #   apply:
# #     needs: terraform
# #     runs-on: ubuntu-latest
# #     # environment:
# #     #   name: production

# #     steps:
# #       - name: Checkout code
# #         uses: actions/checkout@v3

# #       - name: Configure AWS Credentials
# #         uses: aws-actions/configure-aws-credentials@v1
# #         with:
# #           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
# #           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
# #           aws-region: us-east-2

# #       - name: Set up Terraform
# #         uses: hashicorp/setup-terraform@v1.4.0
# #         with:
# #           terraform_version: 1.6.0

# #       - name: Download Terraform Plan
# #         uses: actions/download-artifact@v3
# #         with:
# #           name: tfplan
# #           path: ./terraform

# #       - name: Terraform Init
# #         run: terraform init
# #         working-directory: ./terraform

# #       - name: Terraform Apply
# #         run: terraform apply -auto-approve tfplan
# #         working-directory: ./terraform

# #   destroy:
# #     runs-on: ubuntu-latest
# #     if: contains(github.event.head_commit.message, 'destroy') || github.event_name == 'workflow_dispatch'  # Run this job if 'destroy' is in the commit message or manually triggered

# #     steps:
# #       - name: Checkout code
# #         uses: actions/checkout@v3

# #       - name: Configure AWS Credentials
# #         uses: aws-actions/configure-aws-credentials@v1
# #         with:
# #           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
# #           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
# #           aws-region: us-east-2

# #       - name: Set up Terraform
# #         uses: hashicorp/setup-terraform@v1.4.0
# #         with:
# #           terraform_version: 1.6.0

# #       - name: Terraform Init
# #         run: terraform init
# #         working-directory: ./terraform

# #       - name: Terraform Destroy
# #         run: terraform destroy -auto-approve
# #         working-directory: ./terraform


# #     #   - name: Check and Retry Terraform Destroy
# # #         run: |
# # #           for i in {1..5}; do
# # #             terraform destroy -auto-approve && break || (echo "State lock detected. Retrying in 10 seconds..." && sleep 10)
# # #           done
# # #         working-directory: ./terraform/infra
