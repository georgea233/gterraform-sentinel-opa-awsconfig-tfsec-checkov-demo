name: terraform cicd pipeline

on:
  push:
    branches:
      - main
      - dev
      - '*'
  workflow_dispatch:

jobs:
  terraform:
    runs-on: ubuntu-latest 
    if: "!contains(github.event.head_commit.message, 'destroy')"  # Prevent this job from running if 'destroy' is in the commit message

    steps:    
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
          aws-region: us-east-2   

    #   - name: Run tfsec
    #     uses: aquasecurity/tfsec-action@v1.0.0

    #   - name: Run Checkov
    #     uses: bridgecrewio/checkov-action@v12
    #     with:
    #       directory: ./terraform

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1.4.0
        with:
          terraform_version: 1.6.0 

      - name: Install OPA
        run: |
          curl -L -o opa https://github.com/open-policy-agent/opa/releases/download/v0.46.0/opa_linux_amd64
          chmod +x opa
          sudo mv opa /usr/local/bin/opa

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform fmt   
        run: terraform fmt
        working-directory: ./terraform

      - name: Terraform validate
        run: terraform validate
        working-directory: ./terraform

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: ./terraform

      - name: Output Terraform Plan 
        run: terraform show tfplan
        working-directory: ./terraform

      - name: Export Terraform Plan as JSON
        run: terraform show -json tfplan > ./terraform/plan.json
        working-directory: ./terraform 

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: tfplan
          path: ./terraform/tfplan

      - name: OPA Policy Evaluation
        # run: |
        #  opa eval --format pretty --data ./terraform/policies/opa.rego \
        #  --input ./terraform/plan.json "data.opa.deny"
         run: |
          /usr/local/bin/opa eval --format pretty --data ./terraform/policies/opa.rego \
          --input ./terraform/plan.json "data.opa.deny"
        # env:
        #   OPA_POLICY: ${{ secrets.OPA_POLICY }}  # Optional: Use this secret to fetch OPA policy from a secure location

  apply:
    needs: terraform
    runs-on: ubuntu-latest
    # environment:
    #   name: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
          aws-region: us-east-2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1.4.0
        with:
          terraform_version: 1.6.0

      - name: Download Terraform Plan
        uses: actions/download-artifact@v3
        with:
          name: tfplan
          path: ./terraform

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

    #   - name: Terraform Apply
    #     run: terraform apply -auto-approve tfplan
    #     working-directory: ./terraform

  destroy:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'destroy') || github.event_name == 'workflow_dispatch'  # Run this job if 'destroy' is in the commit message or manually triggered

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
          aws-region: us-east-2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1.4.0
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Destroy
        run: terraform destroy -auto-approve
        working-directory: ./terraform

    #   - name: Check and Retry Terraform Destroy
#         run: |
#           for i in {1..5}; do
#             terraform destroy -auto-approve && break || (echo "State lock detected. Retrying in 10 seconds..." && sleep 10)
#           done
#         working-directory: ./terraform/infra






# name: terraform cicd pipeline

# on:
#   push:
#     branches:
#       - main
#       - dev
#       - '*'
#   workflow_dispatch: 

# jobs:
#   terraform:
#     runs-on: ubuntu-latest 
#     if: "!contains(github.event.head_commit.message, 'destroy')"  #Prevent this job from running if 'destroy' is in the commit message

#     steps:    
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
#           aws-region: us-east-2   

#       - name: Run tfsec
#         uses: aquasecurity/tfsec-action@v1.0.0

#       - name: Run Checkov
#         uses: bridgecrewio/checkov-action@v12
#         with:
#           directory: ./terraform

#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v1.4.0
#         with:
#           terraform_version: 1.6.0 

#       - name: Install OPA
#         run: |
#           curl -L -o opa https://github.com/open-policy-agent/opa/releases/download/v0.46.0/opa_linux_amd64
#           chmod +x opa
#           sudo mv opa /usr/local/bin/opa

#       - name: Terraform Init
#         run: terraform init
#         working-directory: ./terraform

#       - name: Terraform fmt   
#         run: terraform fmt
#         working-directory: ./terraform

#       - name: Terraform validate
#         run: terraform validate
#         working-directory: ./terraform

#       - name: Terraform Plan
#         run: terraform plan -out=tfplan
#         working-directory: ./terraform

#       - name: Output Terraform Plan 
#         run: terraform show tfplan
#         working-directory: ./terraform

#       - name: Upload Terraform Plan
#         uses: actions/upload-artifact@v3
#         with:
#           name: tfplan
#           path: ./terraform/tfplan

#   apply:
#     needs: terraform
#     runs-on: ubuntu-latest
#     # environment:
#     #   name: production

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
#           aws-region: us-east-2

#       - name: Set up Terraform
#         uses: hashicorp/setup-terraform@v1.4.0
#         with:
#           terraform_version: 1.6.0

#       - name: Download Terraform Plan
#         uses: actions/download-artifact@v3
#         with:
#           name: tfplan
#           path: ./terraform

#       - name: Terraform Init
#         run: terraform init
#         working-directory: ./terraform

#       - name: Terraform Apply
#         run: terraform apply -auto-approve tfplan
#         working-directory: ./terraform

#   destroy:
#     runs-on: ubuntu-latest
#     if: contains(github.event.head_commit.message, 'destroy') || github.event_name == 'workflow_dispatch'  # Run this job if 'destroy' is in the commit message or manually triggered

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
#           aws-region: us-east-2

#       - name: Set up Terraform
#         uses: hashicorp/setup-terraform@v1.4.0
#         with:
#           terraform_version: 1.6.0

#       - name: Terraform Init
#         run: terraform init
#         working-directory: ./terraform

#       - name: Terraform Destroy
#         run: terraform destroy -auto-approve
#         working-directory: ./terraform


#     #   - name: Check and Retry Terraform Destroy
# #         run: |
# #           for i in {1..5}; do
# #             terraform destroy -auto-approve && break || (echo "State lock detected. Retrying in 10 seconds..." && sleep 10)
# #           done
# #         working-directory: ./terraform/infra

#         ##rt4rt4rerewrfn
